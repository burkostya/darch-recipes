#!/bin/bash
set -e

. ../common

# Initialize the keys
pacman-key --init
pacman-key --populate archlinux

# Resyn the database
pacman -Sy --noconfirm
# Update gpg keys before we install anything else.
pacman -S --noconfirm archlinux-keyring
# Now update everything.
pacman -Syu --noconfirm

# Let's update the mirrors.
install_packages wget sed
wget -q -O- https://www.archlinux.org/mirrorlist/\?country\=RU\&protocol\=https\&ip_version\=4\&use_mirror_status\=on \
  | sed -e "s/#Server/Server/g" \
  | sed "/aur\.rocks/d" \
  > /etc/pacman.d/mirrorlist

# Run base install, with dev tools. The "bootstrap" fs doesn't contain everything, just what you need to bootstrap.
install_packages base base-devel

# Timezone
rm /etc/localtime
ln -s ../usr/share/zoneinfo/Europe/Moscow /etc/localtime

# Time sync
install_packages ntp
systemctl enable ntpd

# Setup the locales.
echo "en_US.UTF-8 UTF-8" > /etc/locale.gen
echo "ru_RU.UTF-8 UTF-8" >> /etc/locale.gen
echo "en_DK.UTF-8 UTF-8" >> /etc/locale.gen
# set system locale
echo "LANG=en_US.UTF-8" > /etc/locale.conf
# use ISO-8601 for time
echo "LC_TIME=en_DK.UTF-8" >> /etc/locale.conf
# use ru locale for users
mkdir -p /mnt/etc/skel/.config
echo "LANG=ru_RU.UTF-8" > /mnt/etc/skel/.config/locale.conf
locale-gen

# Use fish, not bash
install_packages fish

# Set the root password
if [ -n  "$ROOT_PASSWD" ]; then
    echo "Using root password provided by environment variable..."
    echo -en "$ROOT_PASSWD\n$ROOT_PASSWD" | passwd
else
    echo "Using default root password..."
    echo -en "123\n123" | passwd
fi

# Add our users
groupadd guests
useradd -m -G adm,ftp,games,http,log,rfkill,sys,systemd-journal,users,uucp,wheel -s /usr/bin/bash burkostya
useradd -m -G guests,users -s /usr/bin/bash guest

# Set the root password
if [ -n  "$USER_PASSWD" ]; then
    echo "Using user password provided by environment variable..."
    echo -en "$USER_PASSWD\n$USER_PASSWD" | passwd burkostya
else
    echo "Using default user password..."
    echo -en "123\n123" | passwd burkostya
fi

install_packages git python
runuser -l burkostya -c "git clone https://github.com/burkostya/dotfiles.git ~/.dotfiles"
runuser -l burkostya -c "cd ~/.dotfiles && ./install"
# Now that they are installed, removed dotbot to clean up the image.
runuser -l burkostya -c "rm -r ~/.dotfiles/dotbot"

echo "burkostya ALL=(ALL) ALL" >> /etc/sudoers

runuser -l burkostya -c "git clone https://aur.archlinux.org/trizen.git ~/trizen"
runuser -l burkostya -c "cd ~/trizen && makepkg -si --noconfirm"
runuser -l burkostya -c "rm -r ~/trizen"

install_packages polkit

# install ssh
install_packages openssh

install_packages udisks2 udiskie

# Install Darch
install_aur_package darch
# We don't need grub as a bootloader, but we use
# their helper scripts in Darch to generate menu entries.
install_packages grub
# Enable containerd, which was brought in as a dependency.
systemctl enable containerd
# I store containerd on /var/lib/darch/containerd, because /var/lib/darch
# is an external partition. This way, images are persisted across boots.
mkdir -p /etc/containerd
echo "root = \"/var/lib/darch/containerd\"" > /etc/containerd/config.toml

# Enable systemd networking.
cp wired.network /etc/systemd/network/
systemctl enable systemd-networkd
systemctl enable systemd-resolved
