function install_aur () {
    local package="$1"

    echo "==> installing $package"

    local deps="$(trizen -Si $package | sed -n '/Depends\ On/,/:/p' | sed '$d' | cut -d: -f2 | tr '\n' ' ' | sed -r 's| +| |g' | xargs echo)"

    if [ "$deps" != "None" ]; then
        echo "==> all deps: $deps"
        local d="$(filter_new $deps)"
        echo "==> installing deps: $d"
        pacman -S --noconfirm --needed $d
    fi

    local makeDeps="$(trizen -Si $package | sed -n '/Make\ Deps/,/:/p' | sed '$d' | cut -d: -f2 | tr '\n' ' ' | sed -r 's| +| |g' | xargs echo)"
    if [ "$makeDeps" != "None" ]; then
        echo "==> all make deps: $makeDeps"
        local md="$(filter_new $makeDeps)"
        echo "==> installing make deps: $md"
        pacman -S --noconfirm --needed $md
    fi

    echo "==> getting package $package"
    runuser -l burkostya -c "trizen -G $package"
    echo "==> building package $package"
    runuser -l burkostya -c "cd $package && makepkg -s --noconfirm"
    echo "==> list of builded packages"
    ls /home/burkostya/$package/
    echo "==> upgrading package $package"
    pushd /home/burkostya/$package
    pacman -U --noconfirm --needed $(ls | grep tar.xz)
    popd
}

function filter_new () {
    local new

    for package in "$@"; do
        >&2 echo "==> checking is $package in system"
        if pacman -Q "$package" > /dev/null 2>&1; then 
            >&2 echo "==> $package already present in system"
        else
            >&2 echo "==> adding $package to new"
            new+=("$package")
        fi
    done

    echo "${new[@]}"
}