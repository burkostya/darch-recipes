#!/bin/bash
set -e

# Initialize the keys
pacman-key --init
pacman-key --populate archlinux

# Resyn the database
pacman -Syy --noconfirm
# Update gpg keys before we install anything else.
pacman -S --noconfirm --needed archlinux-keyring
pacman-key --populate archlinux
# Now update everything.
pacman -Syyu --noconfirm

# Let's update the mirrors.
pacman -S --noconfirm --needed wget sed
yes | pacman -S --noconfirm nftables

wget -q -O- https://www.archlinux.org/mirrorlist/\?country\=RU\&protocol\=https\&ip_version\=4\&use_mirror_status\=on \
  | sed -e "s/#Server/Server/g" \
  | sed "/mirror\.rol\.ru/d" \
  > /etc/pacman.d/mirrorlist

echo 'Server = http://mirror.rackspace.com/archlinux/$repo/os/$arch' >> /etc/pacman.d/mirrorlist

pacman -Syyu --noconfirm

pacman -S --noconfirm --needed systemd-resolvconf base base-devel 
pacman -S --noconfirm --needed linux linux-api-headers linux-firmware linux-headers
pacman -S --noconfirm --needed lvm2

pacman -S --noconfirm --needed curl patch
# curl https://gist.githubusercontent.com/pauldotknopf/ff8e986225ab2f264acea1a5bb0c6c5a/raw/5c26a163f7815682793001312b0bd693bebb3d45/makepkg.patch | patch /usr/bin/makepkg

echo "==> add mgmt user"
useradd -m -G adm,sys,wheel -s /usr/bin/bash mgmt 
passwd -d mgmt
echo 'mgmt ALL=(ALL) ALL' > /etc/sudoers.d/mgmt
# echo 'mgmt ALL=(ALL) NOPASSWD: ALL' > /etc/sudoers.d/mgmt

echo "==> installing gosu"
curl https://github.com/tianon/gosu/releases/download/1.11/gosu-amd64 > /gosu
curl https://github.com/tianon/gosu/releases/download/1.11/gosu-amd64.asc > /gosu.asc
chmod +x /gosu
mv /gosu /usr/bin/gosu
rm /gosu.asc

echo "==> installing trizen"
pacman -S --noconfirm --needed git sudo \
  pacutils perl-libwww perl-term-ui perl-json perl-data-dump \
  perl-lwp-protocol-https perl-term-readline-gnu
runuser -l mgmt -c 'git clone https://aur.archlinux.org/trizen.git ~/trizen'
runuser -l mgmt -c 'cd ~/trizen && makepkg -s --noconfirm'
pacman -U --noconfirm --needed /home/mgmt/trizen/$(ls /home/mgmt/trizen/ | grep tar.zst)
cp install_aur /usr/local/src/install_aur

echo "==> installing yay"
runuser -l mgmt -c 'git clone https://aur.archlinux.org/yay-bin.git ~/yay'
runuser -l mgmt -c 'cd ~/yay && makepkg -s --noconfirm'
pacman -U --noconfirm --needed /home/mgmt/yay/$(ls /home/mgmt/yay/ | grep tar.zst)

echo "==> debug sudo"
ls -la /usr/bin/sudo
mount

echo "==> remove mgmt user"
rm -rf /home/mgmt
rm /etc/sudoers.d/mgmt
userdel mgmt

echo "==> setup timezone"
# Timezone
ln -sf ../usr/share/zoneinfo/Europe/Moscow /etc/localtime

# Time sync
echo "==> setup syncing time"
pacman -S --noconfirm --needed ntp
systemctl enable ntpd

# Setup the locales.
echo "==> setup locales"
echo "en_US.UTF-8 UTF-8" > /etc/locale.gen
echo "ru_RU.UTF-8 UTF-8" >> /etc/locale.gen
echo "en_DK.UTF-8 UTF-8" >> /etc/locale.gen
# set system locale
echo "LANG=en_US.UTF-8" > /etc/locale.conf
# use ISO-8601 for time
echo "LC_TIME=en_DK.UTF-8" >> /etc/locale.conf
# use ru locale for users
mkdir -p /etc/skel/.config
echo "LANG=en_US.UTF-8" > /etc/skel/.config/locale.conf
locale-gen

pacman -S --noconfirm --needed jack2

# Use fish, not bash
pacman -S --noconfirm --needed fish

# Set the root password
if [ -n  "$ROOT_PASSWD" ]; then
    echo "Using root password provided by environment variable..."
    echo -en "$ROOT_PASSWD\n$ROOT_PASSWD" | passwd
else
    echo "Using default root password..."
    echo -en "123\n123" | passwd
fi

pacman -S --noconfirm --needed python

pacman -S --noconfirm --needed polkit

pacman -S --noconfirm --needed terminus-font
echo "FONT=ter-p32n" > /etc/vconsole.conf

# install ssh
pacman -S --noconfirm --needed openssh

pacman -S --noconfirm --needed tree

pacman -S --noconfirm --needed cups

systemctl disable man-db.timer

# Enable systemd networking.
cp wired.network /etc/systemd/network/
systemctl enable systemd-networkd
systemctl enable systemd-resolved

pacman -S --noconfirm --needed networkmanager
pacman -S --noconfirm --needed openvpn
cp nodns.conf /etc/NetworkManager/conf.d/
touch /etc/NetworkManager/conf.d/resolv.conf
systemctl enable NetworkManager

echo "nameserver 1.1.1.1" > /etc/resolv.conf

echo "DNSSEC=no" >> /etc/systemd/resolved.conf

pacman -S --noconfirm --needed unzip

echo "blacklist pcspkr" > /etc/modprobe.d/nobeep.conf

## enable mDNS/DNS-SD
pacman -S --noconfirm --needed avahi
systemctl enable avahi-daemon

# user stage

## add users
groupadd guests
useradd -m -G adm,ftp,games,http,log,rfkill,sys,systemd-journal,users,uucp,wheel,video -s /usr/bin/fish burkostya
useradd -m -G guests,users -s /usr/bin/fish guest

# Set the root password
if [ -n  "$USER_PASSWD" ]; then
    echo "Using user password provided by environment variable..."
    echo -en "$USER_PASSWD\n$USER_PASSWD" | passwd burkostya
else
    echo "Using default user password..."
    echo -en "123\n123" | passwd burkostya
fi

pacman -S --noconfirm --needed chezmoi

runuser -l burkostya -c "git clone https://github.com/burkostya/dotfiles.git ~/.dotfiles"
runuser -l burkostya -c "cd ~/.dotfiles; and ./install"
# Now that they are installed, removed dotbot to clean up the image.
runuser -l burkostya -c "rm -r ~/.dotfiles/dotbot"

echo "burkostya ALL=(ALL) ALL" >> /etc/sudoers

# runuser -l burkostya -c "git clone https://github.com/oh-my-fish/oh-my-fish.git ~/oh-my-fish"
# runuser -l burkostya -c "cd ~/oh-my-fish; and bin/install --noninteractive"

# install_aur fisher

# runuser -l burkostya -c "fisher add rafaelrinaldi/pure"

pacman -S --noconfirm --needed upower

# sec stage
pacman -S --noconfirm --needed pwgen gnupg pass passff-host

pacman -S --noconfirm --needed keybase keybase-gui

pacman -S --noconfirm --needed apparmor

pacman -S --noconfirm --needed seahorse

. /usr/local/src/install_aur

# dev stage

pacman -S --noconfirm ttf-dejavu ttf-fira-code

pacman -S --noconfirm --needed libx264

install_aur visual-studio-code-bin
runuser -l burkostya -c "cat $(pwd)/vscode-extensions | xargs -n 1 code --install-extension"

install_aur taskfile-git

install_aur goland

## android sdk
pacman -S --noconfirm --needed jdk8-openjdk
install_aur android-sdk 
install_aur android-sdk-platform-tools 
install_aur android-sdk-build-tools
install_aur android-emulator
install_aur android-platform-29
groupadd android-sdk
gpasswd -a burkostya android-sdk
mkdir /opt/android-sdk/system-images
mkdir /opt/android-sdk/licenses
chown -R root:android-sdk /opt/android-sdk
chown -R burkostya:android-sdk /opt/android-sdk/licenses

## flutter
install_aur flutter
mkdir /opt/flutter/bin/cache
chown -R root:flutterusers /opt/flutter/bin/cache
gpasswd -a burkostya flutterusers

install_aur nvm

install_aur postman-bin
install_aur insomnia || true

pacman -S --noconfirm --needed tldr

pacman -S --noconfirm --needed jq

pacman -S --noconfirm --needed python-xmltodict python-toml yq 
install_aur pup-bin

pacman -S --noconfirm go

pacman -S --noconfirm linux-headers
pacman -S --noconfirm virtualbox virtualbox-host-modules-arch
# install_aur virtualbox-ext-oracle
systemctl enable systemd-modules-load
usermod -aG vboxusers burkostya

pacman -S --noconfirm dnsmasq cdrtools dmidecode qemu libvirt

pacman -S --noconfirm virt-install virt-manager virt-viewer
usermod -aG libvirt burkostya

# run qemu under this user
echo 'user = "burkostya"' >> /etc/libvirt/qemu.conf

# Fonts
# install_aur nerd-fonts-complete

pacman -S --noconfirm --needed gvim

# install_aur sos xsos

pacman -S --noconfirm --needed syncthing

install_aur alloy
install_aur tla-tools || true

# ops

## containers

pacman -S --noconfirm docker docker-compose docker-machine
usermod -aG docker burkostya

pacman -S --noconfirm shadow buildah skopeo podman
### enable rootless mode for containers
echo "session    optional   pam_cgfs.so          -c freezer,memory,name=systemd,unified" >> /etc/pam.d/system-login
echo "burkostya:100000:65536" >> /etc/subuid
setcap cap_setuid+ep /usr/bin/newuidmap
echo "burkostya:100000:65536" >> /etc/subgid
setcap cap_setgid+ep /usr/bin/newgidmap

## other
# install_aur darch

pacman -S --noconfirm --needed iotop sysdig

pacman -S --noconfirm --needed mosh

echo "Timespamp: $(date)"

pacman -S --noconfirm --needed terraform
install_aur minikube-bin
install_aur kubectl-bin 
pacman -S --noconfirm --needed helm
install_aur kustomize-bin
install_aur draft-bin

pacman -S --noconfirm --needed ansible

install_aur jsonnet

pacman -S --noconfirm --needed rsync

pacman -S --noconfirm --needed restic

echo "Timespamp: $(date)"

pacman -S --noconfirm --needed python-pip
pip3 install netaddr

pacman -S --noconfirm --needed tinc

## databases
install_aur robo3t-bin
install_aur mongodb-compass

pacman -S --noconfirm --needed dbeaver
pacman -S --noconfirm --needed dbeaver-plugin-office dbeaver-plugin-svg-format

install_aur datagrip

## network
pacman -S --noconfirm --needed ipcalc

# perf stage

install_aur rr-bin
cp rr-sysctl.conf /etc/sysctl.d/99-rr.conf

pacman -S --noconfirm --needed clang llvm netperf iperf ethtool powertop
pacman -S --noconfirm --needed strace
pacman -S --noconfirm --needed bcc bcc-tools python-bcc
pacman -S --noconfirm --needed bpftrace
install_aur fatrace
pacman -S --noconfirm --needed swig
# install_aur trace-cmd
install_aur flamegraph
install_aur ctop-bin

pacman -S --noconfirm --needed smartmontools
systemctl enable smartd

# X stage
echo "==> X stage"
pacman -S --noconfirm --needed xf86-video-intel
pacman -S --noconfirm --needed xorg-server xorg-xrandr xorg-xdpyinfo
pacman -S --noconfirm --needed xorg-xinput xorg-xbacklight
pacman -S --noconfirm --needed xbindkeys

# pacman -S --noconfirm udisks2 udiskie

cp 30-touchpad.conf /etc/X11/xorg.conf.d/

cp 30-trackpoint.conf /etc/X11/xorg.conf.d/
cp 30-trackpoint.hwdb /etc/udev/hwdb.d/

cp wifi /usr/local/bin/

pacman -S --noconfirm --needed imagemagick

cp i3lock.service /etc/systemd/system/i3lock@.service
systemctl enable i3lock@burkostya

usermod -aG audio burkostya

install_aur xidlehook

# audio stage
echo "==> audio stage"

# Enable audio
pacman -S --noconfirm --needed pulseaudio pulseaudio-alsa
pacman -S --noconfirm --needed pavucontrol

# Add ability to connect bluetooth headsets
pacman -S --noconfirm --needed pulseaudio-bluetooth bluez-utils

pacman -S --noconfirm --needed sonic-pi
pacman -S --noconfirm --needed cadence

# i3 stage
echo "==> i3 stage"

# Resyn the database
pacman -Sy --noconfirm

echo "==> installing i3"
pacman -S --noconfirm --needed i3 picom xorg-xinit

echo "==> installing desktop bar"
pacman -S --noconfirm --needed dmenu
runuser -l burkostya -c "gpg --keyserver pool.sks-keyservers.net --recv-keys A1774C1B37DC1DCEDB65EE469B8450B91D1362C1" && \
runuser -l burkostya -c "gpg --keyserver pool.sks-keyservers.net --recv-keys 9B8450B91D1362C1" && \
install_aur j4-dmenu-desktop
install_aur polybar
# extra fonts
pacman -S --noconfirm ttf-nerd-fonts-symbols ttf-font-awesome
pacman -S --noconfirm noto-fonts-extra noto-fonts-emoji
pacman -S --noconfirm ttf-roboto
pacman -S --noconfirm ttf-bitstream-vera
install_aur ttf-windows
install_aur ttf-twemoji-color

runuser -l burkostya -c "gpg --recv-keys 1A09227B1F435A33" && \
install_aur ttf-unifont
install_aur siji-git ttf-material-design-icons-git 

echo "==> install clipboard tools"
install_aur unclutter-xfixes-git 
pacman -S --noconfirm --needed autocutsel

pacman -S --noconfirm --needed redshift

pacman -S --noconfirm --needed xorg-xwininfo xorg-xprop
cp i3-window-criteria /usr/local/bin/

pacman -S --noconfirm --needed peek

## notifications
pacman -S --noconfirm --needed libnotify notification-daemon 
install_aur deadd-notification-center-bin

# browser stage
pacman -S --noconfirm --needed firefox
pacman -S --noconfirm --needed chromium

echo "export BROWSER=firefox" > /etc/profile.d/browser.sh
xdg-mime default firefox.desktop x-scheme-handler/https
xdg-mime default firefox.desktop x-scheme-handler/http

# terminal stage
pacman -S --noconfirm --needed libxcursor alacritty

install_aur obsidian-appimage

# social stage
pacman -S --noconfirm --needed telegram-desktop
install_aur skypeforlinux-stable-bin
install_aur slack-desktop

# design stage

runuser -l burkostya -c "mkdir -p ~/screenshots"
pacman -S --noconfirm --needed flameshot

# --skipinteg
install_aur archlinux-java-run

# install gravit
pacman -S --noconfirm --needed flatpak 
install_aur gconf
# install_aur gravit-designer-bin

# install_aur yed
pacman -S --noconfirm --needed dia
pacman -S --noconfirm --needed graphviz

install_aur figma-linux

# install drawio-desktop
pacman -S --noconfirm --needed yarn
# install_aur drawio-desktop-bin

# dashboard
install_aur wtfutil-bin

echo "Timespamp: $(date)"

echo -en "y\nn" | pacman -Scc